module Main where

import DA.Set as Set

template BookArchive
    with 
        librarian: Party
        books: Set.Set (ContractId Book)
        members: Set.Set (ContractId Member)
    where
        key (librarian) : Party
        maintainer key
        signatory librarian
        choice AddBook: ContractId BookArchive
            with 
                title: Text
                author: Text
            controller librarian
            do 
              bookId <- create Book with
                    title
                    author
                    isAvailable = True
                    librarian
              create this with books = Set.insert bookId books
        choice AddMember: ContractId BookArchive
            with
                member: ContractId Member
            controller librarian
            do create this with members = Set.insert member members
        choice RemoveMember: ContractId BookArchive
            with
                member: ContractId Member
            controller librarian
            do create this with members = Set.delete member members

template Book
    with
        title: Text
        author: Text
        isAvailable: Bool
        librarian: Party
    where
        signatory librarian
        ensure title /= "" && author /= ""
        choice  Checkout: ContractId Book
            with 
                borrower: Party
            controller borrower
            do 
               (baKey, theBookArchive) <- fetchByKey @BookArchive librarian
               (mKey, _) <- fetchByKey @Member borrower
               assertMsg "Only members can checkout books." (Set.member mKey theBookArchive.members)
               assertMsg "This book is not available." isAvailable 
               create this with isAvailable = False
        choice  Return: ContractId Book
            with 
                borrower: Party
            controller borrower
            do 
               assertMsg "This book has already been returned." (isAvailable /= True)
               create this with isAvailable = True
        
template Member
    with 
        name: Text
        email: Text
        active: Bool
        applicant: Party
        librarian: Party
    where
        key applicant : Party
        maintainer key
        signatory applicant, librarian
        ensure name /= "" && email /= ""
        choice AcceptMembership: (ContractId Member, ContractId BookArchive)
            controller librarian
            do 
                newMember <- create this with active = True
                (bookArchiveId, bookArchive) <- fetchByKey @BookArchive librarian
                archive bookArchiveId
                updatedBookArchive <- create BookArchive with
                    librarian
                    books = bookArchive.books
                    members = Set.insert newMember bookArchive.members
                return (newMember, updatedBookArchive)